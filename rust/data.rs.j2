//! Partially-generated data for handling build variants.
//!
//! The [`VariantKind`] enum is autogenerated from the supported StorPool
//! build variants.
//!
//! The full data is provided by the external ``variants-all.json`` file in
//! the StorPool source tree.

use std::str::FromStr;

use serde::{Deserialize, Serialize};

use crate::VariantError;

/// The supported StorPool build variants (OS distribution, version, etc).
#[derive(Debug, Clone, PartialEq, Hash, Eq, Serialize, Deserialize)]
pub enum VariantKind {
    {%- for name, var in variants|dictvsort -%}
    /// {{ var.descr }}
    {{ name }},
    {%- endfor -%}
}

impl VariantKind {
    {%- for name in variants|vsort -%}
    const {{ name }}_NAME: &'static str = "{{ name }}";
    {%- endfor -%}
}

impl AsRef<str> for VariantKind {
    fn as_ref(&self) -> &str {
        match self {
            {%- for name in variants|vsort -%}
            VariantKind::{{ name }} => VariantKind::{{ name }}_NAME,
            {%- endfor -%}
        }
    }
}

impl FromStr for VariantKind {
    type Err = VariantError;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            {%- for name in variants|vsort -%}
            VariantKind::{{ name }}_NAME => Ok(VariantKind::{{ name }}),
            {%- endfor -%}
            other => Err(VariantError::BadVariant(other.to_string())),
        }
    }
}

/// Return the JSON definition of the StorPool variants.
pub fn get_json_def() -> Vec<u8> {
    include_bytes!("variants-all.json").to_vec()
}
